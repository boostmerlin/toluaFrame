//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Lean_Touch_LeanTouchWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Lean.Touch.LeanTouch), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("GetCamera", GetCamera);
		L.RegFunction("GetDampenFactor", GetDampenFactor);
		L.RegFunction("PointOverGui", PointOverGui);
		L.RegFunction("RaycastGui", RaycastGui);
		L.RegFunction("GetFingers", GetFingers);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instances", get_Instances, set_Instances);
		L.RegVar("Fingers", get_Fingers, set_Fingers);
		L.RegVar("InactiveFingers", get_InactiveFingers, set_InactiveFingers);
		L.RegVar("OnFingerDown", get_OnFingerDown, set_OnFingerDown);
		L.RegVar("OnFingerSet", get_OnFingerSet, set_OnFingerSet);
		L.RegVar("OnFingerUp", get_OnFingerUp, set_OnFingerUp);
		L.RegVar("OnFingerTap", get_OnFingerTap, set_OnFingerTap);
		L.RegVar("OnFingerSwipe", get_OnFingerSwipe, set_OnFingerSwipe);
		L.RegVar("OnGesture", get_OnGesture, set_OnGesture);
		L.RegVar("TapThreshold", get_TapThreshold, set_TapThreshold);
		L.RegConstant("DefaultTapThreshold", 0.200000002980232);
		L.RegVar("SwipeThreshold", get_SwipeThreshold, set_SwipeThreshold);
		L.RegConstant("DefaultSwipeThreshold", 100);
		L.RegVar("ReferenceDpi", get_ReferenceDpi, set_ReferenceDpi);
		L.RegConstant("DefaultReferenceDpi", 200);
		L.RegVar("GuiLayers", get_GuiLayers, set_GuiLayers);
		L.RegVar("RecordFingers", get_RecordFingers, set_RecordFingers);
		L.RegVar("RecordThreshold", get_RecordThreshold, set_RecordThreshold);
		L.RegVar("RecordLimit", get_RecordLimit, set_RecordLimit);
		L.RegVar("SimulateMultiFingers", get_SimulateMultiFingers, set_SimulateMultiFingers);
		L.RegVar("PinchTwistKey", get_PinchTwistKey, set_PinchTwistKey);
		L.RegVar("MultiDragKey", get_MultiDragKey, set_MultiDragKey);
		L.RegVar("FingerTexture", get_FingerTexture, set_FingerTexture);
		L.RegVar("CurrentTapThreshold", get_CurrentTapThreshold, null);
		L.RegVar("CurrentSwipeThreshold", get_CurrentSwipeThreshold, null);
		L.RegVar("CurrentReferenceDpi", get_CurrentReferenceDpi, null);
		L.RegVar("CurrentGuiLayers", get_CurrentGuiLayers, null);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("ScalingFactor", get_ScalingFactor, null);
		L.RegVar("AnyMouseButtonSet", get_AnyMouseButtonSet, null);
		L.RegVar("GuiInUse", get_GuiInUse, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCamera(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 1, typeof(UnityEngine.Camera));
				UnityEngine.Camera o = Lean.Touch.LeanTouch.GetCamera(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 1, typeof(UnityEngine.Camera));
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.CheckObject(L, 2, typeof(UnityEngine.GameObject));
				UnityEngine.Camera o = Lean.Touch.LeanTouch.GetCamera(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanTouch.GetCamera");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDampenFactor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			float o = Lean.Touch.LeanTouch.GetDampenFactor(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PointOverGui(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
			bool o = Lean.Touch.LeanTouch.PointOverGui(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastGui(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				System.Collections.Generic.List<UnityEngine.EventSystems.RaycastResult> o = Lean.Touch.LeanTouch.RaycastGui(arg0);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 2)
			{
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
				UnityEngine.LayerMask arg1 = ToLua.ToLayerMask(L, 2);
				System.Collections.Generic.List<UnityEngine.EventSystems.RaycastResult> o = Lean.Touch.LeanTouch.RaycastGui(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanTouch.RaycastGui");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFingers(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				System.Collections.Generic.List<Lean.Touch.LeanFinger> o = Lean.Touch.LeanTouch.GetFingers(arg0, arg1);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else if (count == 3)
			{
				bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				System.Collections.Generic.List<Lean.Touch.LeanFinger> o = Lean.Touch.LeanTouch.GetFingers(arg0, arg1, arg2);
				ToLua.PushSealed(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanTouch.GetFingers");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instances(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Lean.Touch.LeanTouch.Instances);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Fingers(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Lean.Touch.LeanTouch.Fingers);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InactiveFingers(IntPtr L)
	{
		try
		{
			ToLua.PushSealed(L, Lean.Touch.LeanTouch.InactiveFingers);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnFingerDown(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Lean.Touch.LeanTouch.OnFingerDown);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnFingerSet(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Lean.Touch.LeanTouch.OnFingerSet);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnFingerUp(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Lean.Touch.LeanTouch.OnFingerUp);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnFingerTap(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Lean.Touch.LeanTouch.OnFingerTap);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnFingerSwipe(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Lean.Touch.LeanTouch.OnFingerSwipe);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnGesture(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Lean.Touch.LeanTouch.OnGesture);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TapThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			float ret = obj.TapThreshold;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TapThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SwipeThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			float ret = obj.SwipeThreshold;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SwipeThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReferenceDpi(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			int ret = obj.ReferenceDpi;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReferenceDpi on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GuiLayers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			UnityEngine.LayerMask ret = obj.GuiLayers;
			ToLua.PushLayerMask(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GuiLayers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RecordFingers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			bool ret = obj.RecordFingers;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RecordFingers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RecordThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			float ret = obj.RecordThreshold;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RecordThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RecordLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			float ret = obj.RecordLimit;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RecordLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SimulateMultiFingers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			bool ret = obj.SimulateMultiFingers;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SimulateMultiFingers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PinchTwistKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			UnityEngine.KeyCode ret = obj.PinchTwistKey;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PinchTwistKey on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MultiDragKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			UnityEngine.KeyCode ret = obj.MultiDragKey;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MultiDragKey on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FingerTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			UnityEngine.Texture2D ret = obj.FingerTexture;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FingerTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentTapThreshold(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Lean.Touch.LeanTouch.CurrentTapThreshold);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentSwipeThreshold(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Lean.Touch.LeanTouch.CurrentSwipeThreshold);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentReferenceDpi(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Lean.Touch.LeanTouch.CurrentReferenceDpi);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CurrentGuiLayers(IntPtr L)
	{
		try
		{
			ToLua.PushLayerMask(L, Lean.Touch.LeanTouch.CurrentGuiLayers);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Lean.Touch.LeanTouch.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ScalingFactor(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, Lean.Touch.LeanTouch.ScalingFactor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AnyMouseButtonSet(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Lean.Touch.LeanTouch.AnyMouseButtonSet);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GuiInUse(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, Lean.Touch.LeanTouch.GuiInUse);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Instances(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<Lean.Touch.LeanTouch> arg0 = (System.Collections.Generic.List<Lean.Touch.LeanTouch>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<Lean.Touch.LeanTouch>));
			Lean.Touch.LeanTouch.Instances = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Fingers(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<Lean.Touch.LeanFinger> arg0 = (System.Collections.Generic.List<Lean.Touch.LeanFinger>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<Lean.Touch.LeanFinger>));
			Lean.Touch.LeanTouch.Fingers = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_InactiveFingers(IntPtr L)
	{
		try
		{
			System.Collections.Generic.List<Lean.Touch.LeanFinger> arg0 = (System.Collections.Generic.List<Lean.Touch.LeanFinger>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<Lean.Touch.LeanFinger>));
			Lean.Touch.LeanTouch.InactiveFingers = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnFingerDown(IntPtr L)
	{
		try
		{
			System.Action<Lean.Touch.LeanFinger> arg0 = (System.Action<Lean.Touch.LeanFinger>)ToLua.CheckDelegate<System.Action<Lean.Touch.LeanFinger>>(L, 2);
			Lean.Touch.LeanTouch.OnFingerDown = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnFingerSet(IntPtr L)
	{
		try
		{
			System.Action<Lean.Touch.LeanFinger> arg0 = (System.Action<Lean.Touch.LeanFinger>)ToLua.CheckDelegate<System.Action<Lean.Touch.LeanFinger>>(L, 2);
			Lean.Touch.LeanTouch.OnFingerSet = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnFingerUp(IntPtr L)
	{
		try
		{
			System.Action<Lean.Touch.LeanFinger> arg0 = (System.Action<Lean.Touch.LeanFinger>)ToLua.CheckDelegate<System.Action<Lean.Touch.LeanFinger>>(L, 2);
			Lean.Touch.LeanTouch.OnFingerUp = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnFingerTap(IntPtr L)
	{
		try
		{
			System.Action<Lean.Touch.LeanFinger> arg0 = (System.Action<Lean.Touch.LeanFinger>)ToLua.CheckDelegate<System.Action<Lean.Touch.LeanFinger>>(L, 2);
			Lean.Touch.LeanTouch.OnFingerTap = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnFingerSwipe(IntPtr L)
	{
		try
		{
			System.Action<Lean.Touch.LeanFinger> arg0 = (System.Action<Lean.Touch.LeanFinger>)ToLua.CheckDelegate<System.Action<Lean.Touch.LeanFinger>>(L, 2);
			Lean.Touch.LeanTouch.OnFingerSwipe = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnGesture(IntPtr L)
	{
		try
		{
			System.Action<System.Collections.Generic.List<Lean.Touch.LeanFinger>> arg0 = (System.Action<System.Collections.Generic.List<Lean.Touch.LeanFinger>>)ToLua.CheckDelegate<System.Action<System.Collections.Generic.List<Lean.Touch.LeanFinger>>>(L, 2);
			Lean.Touch.LeanTouch.OnGesture = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TapThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.TapThreshold = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TapThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SwipeThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SwipeThreshold = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SwipeThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReferenceDpi(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.ReferenceDpi = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ReferenceDpi on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_GuiLayers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			UnityEngine.LayerMask arg0 = ToLua.ToLayerMask(L, 2);
			obj.GuiLayers = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index GuiLayers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RecordFingers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.RecordFingers = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RecordFingers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RecordThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.RecordThreshold = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RecordThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RecordLimit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.RecordLimit = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index RecordLimit on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SimulateMultiFingers(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.SimulateMultiFingers = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SimulateMultiFingers on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_PinchTwistKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			UnityEngine.KeyCode arg0 = (UnityEngine.KeyCode)ToLua.CheckObject(L, 2, typeof(UnityEngine.KeyCode));
			obj.PinchTwistKey = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index PinchTwistKey on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MultiDragKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			UnityEngine.KeyCode arg0 = (UnityEngine.KeyCode)ToLua.CheckObject(L, 2, typeof(UnityEngine.KeyCode));
			obj.MultiDragKey = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index MultiDragKey on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FingerTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanTouch obj = (Lean.Touch.LeanTouch)o;
			UnityEngine.Texture2D arg0 = (UnityEngine.Texture2D)ToLua.CheckObject(L, 2, typeof(UnityEngine.Texture2D));
			obj.FingerTexture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index FingerTexture on a nil value");
		}
	}
}

