//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Lean_Touch_LeanFingerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Lean.Touch.LeanFinger), typeof(System.Object));
		L.RegFunction("GetRay", GetRay);
		L.RegFunction("GetStartRay", GetStartRay);
		L.RegFunction("GetSnapshotScreenDelta", GetSnapshotScreenDelta);
		L.RegFunction("GetSnapshotScaledDelta", GetSnapshotScaledDelta);
		L.RegFunction("GetSnapshotScreenPosition", GetSnapshotScreenPosition);
		L.RegFunction("GetSnapshotWorldPosition", GetSnapshotWorldPosition);
		L.RegFunction("GetRadians", GetRadians);
		L.RegFunction("GetDegrees", GetDegrees);
		L.RegFunction("GetLastRadians", GetLastRadians);
		L.RegFunction("GetLastDegrees", GetLastDegrees);
		L.RegFunction("GetDeltaRadians", GetDeltaRadians);
		L.RegFunction("GetDeltaDegrees", GetDeltaDegrees);
		L.RegFunction("GetScreenDistance", GetScreenDistance);
		L.RegFunction("GetScaledDistance", GetScaledDistance);
		L.RegFunction("GetLastScreenDistance", GetLastScreenDistance);
		L.RegFunction("GetLastScaledDistance", GetLastScaledDistance);
		L.RegFunction("GetStartScreenDistance", GetStartScreenDistance);
		L.RegFunction("GetStartScaledDistance", GetStartScaledDistance);
		L.RegFunction("GetStartWorldPosition", GetStartWorldPosition);
		L.RegFunction("GetLastWorldPosition", GetLastWorldPosition);
		L.RegFunction("GetWorldPosition", GetWorldPosition);
		L.RegFunction("GetWorldDelta", GetWorldDelta);
		L.RegFunction("ClearSnapshots", ClearSnapshots);
		L.RegFunction("RecordSnapshot", RecordSnapshot);
		L.RegFunction("New", _CreateLean_Touch_LeanFinger);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Index", get_Index, set_Index);
		L.RegVar("Age", get_Age, set_Age);
		L.RegVar("Set", get_Set, set_Set);
		L.RegVar("LastSet", get_LastSet, set_LastSet);
		L.RegVar("Tap", get_Tap, set_Tap);
		L.RegVar("TapCount", get_TapCount, set_TapCount);
		L.RegVar("Swipe", get_Swipe, set_Swipe);
		L.RegVar("LastPressure", get_LastPressure, set_LastPressure);
		L.RegVar("Pressure", get_Pressure, set_Pressure);
		L.RegVar("StartScreenPosition", get_StartScreenPosition, set_StartScreenPosition);
		L.RegVar("LastScreenPosition", get_LastScreenPosition, set_LastScreenPosition);
		L.RegVar("ScreenPosition", get_ScreenPosition, set_ScreenPosition);
		L.RegVar("StartedOverGui", get_StartedOverGui, set_StartedOverGui);
		L.RegVar("Snapshots", get_Snapshots, set_Snapshots);
		L.RegVar("IsActive", get_IsActive, null);
		L.RegVar("SnapshotDuration", get_SnapshotDuration, null);
		L.RegVar("IsOverGui", get_IsOverGui, null);
		L.RegVar("Down", get_Down, null);
		L.RegVar("Up", get_Up, null);
		L.RegVar("LastSnapshotScreenDelta", get_LastSnapshotScreenDelta, null);
		L.RegVar("LastSnapshotScaledDelta", get_LastSnapshotScaledDelta, null);
		L.RegVar("ScreenDelta", get_ScreenDelta, null);
		L.RegVar("ScaledDelta", get_ScaledDelta, null);
		L.RegVar("SwipeScreenDelta", get_SwipeScreenDelta, null);
		L.RegVar("SwipeScaledDelta", get_SwipeScaledDelta, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateLean_Touch_LeanFinger(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Lean.Touch.LeanFinger obj = new Lean.Touch.LeanFinger();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Lean.Touch.LeanFinger.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRay(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				UnityEngine.Ray o = obj.GetRay();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 2, typeof(UnityEngine.Camera));
				UnityEngine.Ray o = obj.GetRay(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanFinger.GetRay");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStartRay(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				UnityEngine.Ray o = obj.GetStartRay();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.CheckObject(L, 2, typeof(UnityEngine.Camera));
				UnityEngine.Ray o = obj.GetStartRay(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanFinger.GetStartRay");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSnapshotScreenDelta(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector2 o = obj.GetSnapshotScreenDelta(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSnapshotScaledDelta(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector2 o = obj.GetSnapshotScaledDelta(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSnapshotScreenPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector2 o = obj.GetSnapshotScreenPosition(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSnapshotWorldPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Vector3 o = obj.GetSnapshotWorldPosition(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Camera arg2 = (UnityEngine.Camera)ToLua.CheckObject(L, 4, typeof(UnityEngine.Camera));
				UnityEngine.Vector3 o = obj.GetSnapshotWorldPosition(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanFinger.GetSnapshotWorldPosition");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRadians(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			float o = obj.GetRadians(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDegrees(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			float o = obj.GetDegrees(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLastRadians(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			float o = obj.GetLastRadians(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLastDegrees(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			float o = obj.GetLastDegrees(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDeltaRadians(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				float o = obj.GetDeltaRadians(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 3);
				float o = obj.GetDeltaRadians(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanFinger.GetDeltaRadians");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDeltaDegrees(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				float o = obj.GetDeltaDegrees(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
				UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 3);
				float o = obj.GetDeltaDegrees(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanFinger.GetDeltaDegrees");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetScreenDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			float o = obj.GetScreenDistance(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetScaledDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			float o = obj.GetScaledDistance(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLastScreenDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			float o = obj.GetLastScreenDistance(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLastScaledDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			float o = obj.GetLastScaledDistance(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStartScreenDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			float o = obj.GetStartScreenDistance(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStartScaledDistance(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			float o = obj.GetStartScaledDistance(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStartWorldPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector3 o = obj.GetStartWorldPosition(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject(L, 3, typeof(UnityEngine.Camera));
				UnityEngine.Vector3 o = obj.GetStartWorldPosition(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanFinger.GetStartWorldPosition");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLastWorldPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector3 o = obj.GetLastWorldPosition(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject(L, 3, typeof(UnityEngine.Camera));
				UnityEngine.Vector3 o = obj.GetLastWorldPosition(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanFinger.GetLastWorldPosition");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWorldPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector3 o = obj.GetWorldPosition(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.CheckObject(L, 3, typeof(UnityEngine.Camera));
				UnityEngine.Vector3 o = obj.GetWorldPosition(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanFinger.GetWorldPosition");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWorldDelta(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Vector3 o = obj.GetWorldDelta(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<float>(L, 3))
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				UnityEngine.Vector3 o = obj.GetWorldDelta(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Camera>(L, 3))
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Camera arg1 = (UnityEngine.Camera)ToLua.ToObject(L, 3);
				UnityEngine.Vector3 o = obj.GetWorldDelta(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
				UnityEngine.Camera arg2 = (UnityEngine.Camera)ToLua.CheckObject(L, 4, typeof(UnityEngine.Camera));
				UnityEngine.Vector3 o = obj.GetWorldDelta(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanFinger.GetWorldDelta");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearSnapshots(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				obj.ClearSnapshots();
				return 0;
			}
			else if (count == 2)
			{
				Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				obj.ClearSnapshots(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Lean.Touch.LeanFinger.ClearSnapshots");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RecordSnapshot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)ToLua.CheckObject<Lean.Touch.LeanFinger>(L, 1);
			obj.RecordSnapshot();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Index(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			int ret = obj.Index;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Index on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Age(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			float ret = obj.Age;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Age on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Set(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool ret = obj.Set;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Set on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastSet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool ret = obj.LastSet;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastSet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Tap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool ret = obj.Tap;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Tap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TapCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			int ret = obj.TapCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TapCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Swipe(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool ret = obj.Swipe;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Swipe on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastPressure(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			float ret = obj.LastPressure;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastPressure on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Pressure(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			float ret = obj.Pressure;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pressure on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StartScreenPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 ret = obj.StartScreenPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StartScreenPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastScreenPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 ret = obj.LastScreenPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastScreenPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ScreenPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 ret = obj.ScreenPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ScreenPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_StartedOverGui(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool ret = obj.StartedOverGui;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StartedOverGui on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Snapshots(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			System.Collections.Generic.List<Lean.Touch.LeanSnapshot> ret = obj.Snapshots;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Snapshots on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsActive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool ret = obj.IsActive;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsActive on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SnapshotDuration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			float ret = obj.SnapshotDuration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SnapshotDuration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsOverGui(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool ret = obj.IsOverGui;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsOverGui on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Down(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool ret = obj.Down;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Down on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Up(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool ret = obj.Up;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Up on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastSnapshotScreenDelta(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 ret = obj.LastSnapshotScreenDelta;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastSnapshotScreenDelta on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LastSnapshotScaledDelta(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 ret = obj.LastSnapshotScaledDelta;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastSnapshotScaledDelta on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ScreenDelta(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 ret = obj.ScreenDelta;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ScreenDelta on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ScaledDelta(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 ret = obj.ScaledDelta;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ScaledDelta on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SwipeScreenDelta(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 ret = obj.SwipeScreenDelta;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SwipeScreenDelta on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SwipeScaledDelta(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 ret = obj.SwipeScaledDelta;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index SwipeScaledDelta on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Index(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Index = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Index on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Age(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Age = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Age on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Set(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Set = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Set on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LastSet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.LastSet = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastSet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Tap(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Tap = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Tap on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TapCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.TapCount = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index TapCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Swipe(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.Swipe = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Swipe on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LastPressure(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.LastPressure = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastPressure on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Pressure(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Pressure = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Pressure on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StartScreenPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.StartScreenPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StartScreenPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LastScreenPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.LastScreenPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LastScreenPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ScreenPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.ScreenPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index ScreenPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_StartedOverGui(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.StartedOverGui = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index StartedOverGui on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Snapshots(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Lean.Touch.LeanFinger obj = (Lean.Touch.LeanFinger)o;
			System.Collections.Generic.List<Lean.Touch.LeanSnapshot> arg0 = (System.Collections.Generic.List<Lean.Touch.LeanSnapshot>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<Lean.Touch.LeanSnapshot>));
			obj.Snapshots = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Snapshots on a nil value");
		}
	}
}

